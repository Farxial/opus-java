plugins {
    id 'com.jfrog.bintray' version '1.7.3'
}

group = 'club.minnced'
project.version = '1.0.3'

task wrapper(type: Wrapper) {
    gradleVersion = "4.6"
}

allprojects {
    repositories {
        jcenter()
    }

    apply plugin: 'java-library'
    apply plugin: 'maven-publish'

    group = 'club.minnced'
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

dependencies {
    compile project(':api')
    compile project(':natives')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
}

build.dependsOn sourcesJar

bintrayUpload {
    dependsOn build

    onlyIf { !getProjectProperty("bintrayUsername").empty }
    onlyIf { !getProjectProperty("bintrayApiKey").empty }
}

bintray {
    user = bintrayUsername
    key = bintrayApiKey
    publications = ["BintrayRelease"]
    pkg {
        repo = 'maven'
        name = project.name
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/discord-java/opus-java.git'
        githubRepo = 'discord-java/opus-java'
        publish = true
        version {
            name = project.version
            vcsTag = project.version
            released = new Date()
            gpg {
                sign = true
            }
        }
    }
}

String getProjectProperty(String propertyName) {
    return hasProperty(propertyName) ? this.properties[propertyName] : ""
}

publishing {
    publications {
        BintrayRelease(MavenPublication) {
            groupId project.group
            artifactId project.name
            version version
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each {
                    def node = dependenciesNode.appendNode('dependency')
                    node.appendNode('groupId', it.group)
                    node.appendNode('artifactId', it instanceof ProjectDependency ? it.dependencyProject.moduleName : it.name)
                    node.appendNode('version' , it.version)
                    node.appendNode('scope', 'compile')
                }
            }
        }
    }
}
